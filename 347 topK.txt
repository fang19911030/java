public class Solution{
	public List<Integer> topKFrequent(int [] nums, int k){
		Map<Integer,Integer>map=new HashMap<>();
		for(int n:nums){
			may.put(n,map.getOrDefault(n,0)+1);
		}
		List<Integer>[] bucket = new List[nums.length+1];            //why+1
		for (int n:map.keySet()){
			int freq=map.get(n)
			if (bucket[freq]==null)
				bucket[freq]=new LinkedList<>();
			bucket[freq].add(n);
		}

		List<Integer>res=new LinkedList<>();
		for(int i=bucket.length-1:i>0 && k>0;i--){
			if(bucket[i]!=null){
				List<Integer>list=bucket[i];
				res.addAll(list);
				k-=res.size();
			}

		}

		return res;
	}
}

public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
           
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
                         new PriorityQueue<>((a,b)->(b.getValue()-a.getValue()));              //怎么知道是最大堆
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            maxHeap.add(entry);
        }
        
        List<Integer> res = new ArrayList<>();
        while(res.size()<k){
            Map.Entry<Integer, Integer> entry = maxHeap.poll();
            res.add(entry.getKey());
        }
        return res;
    }
}
